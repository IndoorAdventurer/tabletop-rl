// implementation header for all the inline functions.

#include "card_collection.h"

#include <stdexcept>

namespace exploding_kittens {

// ---CardCollection:-----
inline uint8_t CardCollection::has(uint8_t i) const {
    return d_card_counts[i];
}

inline uint8_t CardCollection::has(CardIdx i) const {
    return d_card_counts[to_uint(i)];
}

inline uint8_t *CardCollection::counts() {
    return d_card_counts.data();
}

inline void CardCollection::base_insert(CardIdx i) {
    ++d_card_counts[to_uint(i)];
}

inline bool CardCollection::base_remove(CardIdx i) {
    if (d_card_counts[to_uint(i)] <= 0)
        return false;
    --d_card_counts[to_uint(i)];
    return true;
}


// ---CardStack:-----
inline void CardStack::shuffle()
{
    std::shuffle(d_ordered.begin(), d_ordered.end(),
        tabletop_general::randnum_gen);
}

inline void CardStack::push(CardIdx i) {
    base_insert(i);
    d_ordered.push_back(i);
}

inline CardIdx CardStack::pop() {
    if (d_ordered.empty())
        throw std::out_of_range("Tried to pop from empty card stack.");
    CardIdx ret = d_ordered.back();
    base_remove(ret);
    d_ordered.pop_back();
    return ret;
}

inline void CardStack::insert(CardIdx i, size_t depth) {
    base_insert(i);
    auto position = depth > d_ordered.size() ?
        d_ordered.begin() : (d_ordered.end() - depth);
    d_ordered.insert(position, i);
}

inline std::span<CardIdx> CardStack::get_top_n(size_t n) {
    auto begin = n > d_ordered.size() ? d_ordered.begin() : d_ordered.end() - n;
    return std::span<CardIdx, std::dynamic_extent>(begin, d_ordered.end());
}

// ---CardHand:-----
inline CardIdx CardHand::take_from(CardStack &stack) {
    CardIdx i = stack.pop();
    base_insert(i);
    return i;
}

inline bool CardHand::take_from(CardHand &other, CardIdx i) {
    if (other.base_remove(i)) {
        base_insert(i);
        return true;
    }
    return false;
}

inline CardIdx CardHand::take_from(CardHand &other) {
    CardIdx i = random_card();
    take_from(other, i);
    return i;
}

inline void CardHand::place_at(CardStack &stack, CardIdx i) {
    if (not base_remove(i))
        throw std::range_error("Specified card not in own hand.");
    stack.push(i);
}

inline void CardHand::place_at(CardStack &stack, CardIdx i, size_t depth) {
    if (not base_remove(i))
        throw std::range_error("Specified card not in own hand.");
    stack.insert(i, depth);
}

inline void CardHand::give_to(CardHand &other, CardIdx i) {
    other.take_from(*this, i);
}

} // namespace exploding_kittens