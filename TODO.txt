UP NEXT:
* Implement game states.
* Implement game actions.

LONG TERM:
* Extent functionality to also encapsulate who knows what.
    * Make this optional!
    * Should only be the case for specific CardHands, so maybe just create
      something of a change listener that is directly linked to the related
      agent.
* Beware of the following:
    * With Favor and Two Card Combo, there is a "bug" in the rules that one
      one might play their nope to prevent it, but that the nope gets noped,
      resulting in having to give/take a card while none are there. In this
      case, it is best to just not give/take anything.
* Refactor card_defs.ih: I can make it shorter when using the std::integer_range
  thingy.

STATE AND ACTION SPACE REPRESENTATION:
* State space:
    * For own hand: frequency of occurence of each card
    * For other players:
        * Number of cards in their hand
        * All cards you know they played/lost: again frequency for each card.
    * For deck:
        * Total number of cards remaining.
    * Optionally:
        * History of played actions by each player.
    * PROBLEM!:
        * Without history, this representation doesn't tell you where you hid the kitten
          or what you saw when you played a see future.
* Action space:
    * Selected cards: same sort of frequency vector as for hand or played/lost cards.
    * ARG1 and ARG2. These are general arguments meant for things like
        * A target player (e.g. to steal from);
        * A target depth (i.e. for placing back an Exploding Kitten);
        * A target card (for 3 cards combo).

LONGER TERM:
* Implement 'Regenwormen'.
* Implement 'Mens erger je niet'.
